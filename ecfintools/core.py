"""All core functions and classes in ecfintools"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs-dev/00_core.ipynb.

# %% auto 0
__all__ = ['safe_date', 'df_safe_sampling']

# %% ../nbs-dev/00_core.ipynb 4
import re
from datetime import datetime
from pathlib import Path
from typing import Optional

import pandas as pd

# %% ../nbs-dev/00_core.ipynb 7
def safe_date(
    dt:str|datetime # date time to validate or convert
    ) -> datetime:  # datetime type object
    """Return a datetime object from a datetime or string

    Accepted formats:

    - 'YYYY-MM-DD', 'YYYY/MM/DD', 'YYYY.MM.DD'
    - 'HH:MM:SS' can be added to the above formats
    """
    if isinstance(dt, datetime): return dt

    elif isinstance(dt, str):
        pattern = re.compile(r'\d{4}(?P<sep>[-\/\.])\d{2}(?P=sep)\d{2}(?P<t>\s?\d{2}:\d{2}:\d{2})?')
        match = pattern.search(dt)
        if match:
            sep = match.group('sep')
            t = match.group('t')
        else:
            msg = f"dt must be in format 'YYYY<sep>MM<sep>DD hh:mm:ss' where <sep> is one of '-/.'"
            raise AttributeError(msg)

        str_format = f"%Y{sep}%m{sep}%d{' %H:%M:%S' if t else ''}"
        return datetime.strptime(dt, str_format)

# %% ../nbs-dev/00_core.ipynb 10
def df_safe_sampling(
    df:pd.DataFrame,                        # df that will be sampled
    first:Optional[str|datetime] = None,    # first date to be included
    last:Optional[str|datetime] = None      # last date to be included
    ) -> pd.DataFrame:                      # sampled df
    """Sample a DataFrame from first to last, or the closest dates available in df.index."""

    if not isinstance(df.index, pd.DatetimeIndex):
        raise AttributeError("df.index must be a DatetimeIndex")

    earliest, latest = df.index[0], df.index[-1]
    if first is None: first = earliest
    if last is None:  last = latest
    first, last = safe_date(first), safe_date(last)
    if first > last:
        msg = f"first ({first:%Y-%m-%d}) not before last ({last:%Y-%m-%d})"
        raise AttributeError(msg)

    sampled = df.loc[max(first, earliest):min(last, latest), :].copy()
    return sampled
