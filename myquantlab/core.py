"""All core functions and classes in ecfintools"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs-dev/00_core.ipynb.

# %% auto 0
__all__ = ['safe_date', 'time_slice_df', 'load_test_df']

# %% ../nbs-dev/00_core.ipynb 4
import re
from datetime import datetime
from pathlib import Path
from typing import Optional

import pandas as pd

from . import PACKAGE_ROOT

# %% ../nbs-dev/00_core.ipynb 8
def safe_date(
    dt:str|datetime # date time to validate or convert
    ) -> datetime:  # datetime type object
    """Return a datetime object from string or datetime

    Accepted formats:
    
    - 'YYYY-MM-DD', 'YYYY/MM/DD', 'YYYY.MM.DD'
    - 'HH:MM:SS' can be added to the above formats
    
    """
    if isinstance(dt, datetime): return dt

    elif isinstance(dt, str):
        pattern = re.compile(r'\d{4}(?P<sep>[-\/\.])\d{2}(?P=sep)\d{2}(?P<t>\s?\d{2}:\d{2}:\d{2})?')
        match = pattern.search(dt)
        if match:
            sep = match.group('sep')
            t = match.group('t')
        else:
            msg = f"dt must be in format 'YYYY<sep>MM<sep>DD hh:mm:ss' where <sep> is one of '-/.'"
            raise AttributeError(msg)

        str_format = f"%Y{sep}%m{sep}%d{' %H:%M:%S' if t else ''}"
        return datetime.strptime(dt, str_format)

# %% ../nbs-dev/00_core.ipynb 11
def time_slice_df(
    df:pd.DataFrame,                   # `df` that will be sliced, must have a `DateTimeIndex`
    start:str|datetime|None = None,    # start date for slicing
    end:str|datetime|None = None       # end date for slicing
    ) -> pd.DataFrame:                 # sliced `df`
    """Slices DataFrame's rows from start to end, or the closest datetime available in the DataTimeIndex."""

    if not isinstance(df.index, pd.DatetimeIndex):
        raise AttributeError("df.index must be a DatetimeIndex")

    earliest, latest = df.index[0], df.index[-1]
    if start is None: start = earliest
    if end is None:  end = latest
    start, end = safe_date(start), safe_date(end)
    if start > end:
        msg = f"start ({start:%Y-%m-%d}) not before end ({end:%Y-%m-%d})"
        raise AttributeError(msg)

    sampled = df.loc[max(start, earliest):min(end, latest), :]
    return sampled

# %% ../nbs-dev/00_core.ipynb 14
def load_test_df() -> pd.DataFrame:
    p2csv = (PACKAGE_ROOT / '../nbs-dev/data-dev/ohlcv-data.csv').resolve()
    assert p2csv.is_file()
    df = pd.read_csv(p2csv, header=None, parse_dates=[[0,1]], index_col=0)
    df.columns = 'Open High Low Close Volume'.split()
    df.index.name = 'dt'
    return df
