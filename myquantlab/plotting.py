"""Set of functions and classes to make plotting easier"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs-dev/02_plotting.ipynb.

# %% auto 0
__all__ = ['plot_timeseries', 'hist_timeseries', 'plot_acfs', 'normal_probability_plot']

# %% ../nbs-dev/02_plotting.ipynb 4
from datetime import datetime
from pathlib import Path
from typing import Callable, Iterable, Optional

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from matplotlib.axes import Axes
from scipy import stats
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

from .core import load_test_df

# %% ../nbs-dev/02_plotting.ipynb 5
def plot_timeseries(
    *tseries: pd.Series,    # one of several np.Series with DataTimeIndex
    ax:Optional[Axes]=None, # axis to plot    
    add_legend:bool=False   # add legend to plot, when True
    ) -> None:
    if ax is None:
        fig, ax = plt.subplots()

    if not isinstance(tseries, tuple):
        tseries = (tseries,)
    for i, ts in enumerate(tseries):
        label = getattr(ts, "name", str(i))
        ax.plot(ts, alpha=0.5, label=label)
    if add_legend:
        ax.legend()
    plt.show()

# %% ../nbs-dev/02_plotting.ipynb 7
def hist_timeseries(
    *tseries: pd.Series, 
    ax:Optional[Axes]=None
    ) -> None:

    if not isinstance(tseries, tuple):
        tseries = (tseries,)
    ntseries = len(tseries)
    if ax is None:
        fig, axs = plt.subplots(nrows=1, ncols=ntseries, figsize=(5 * ntseries, 4))
        if not isinstance(axs, np.ndarray): # single axis
            axs = (axs,)
    else:
        axs = (ax,)
    for ax, ts in zip(axs, tseries):
        n = ts.shape[0]
        bins = n // 10
        rng = np.random.default_rng()
        z = rng.normal(loc=ts.mean(), scale=ts.std(), size=n)

        ax.hist(ts, bins=bins, histtype='step', label='TS')      # type: ignore
        ax.hist(z, bins=bins, histtype='step', label='Gaussian') # type: ignore
        ax.legend() # type: ignore
    plt.show()


# %% ../nbs-dev/02_plotting.ipynb 9
def plot_acfs(*tseries, incl_lag0=False, alpha=0.05, ax=None):
    for ts in tseries:
        if ax is None:
            _, axes = plt.subplots(nrows=1, ncols=2, figsize=(16, 4))
        else:
            axes = ax
        plot_acf(ts.dropna(), ax=axes[0], zero=incl_lag0, alpha=alpha)
        plot_pacf(ts.dropna(), ax=axes[1], zero=incl_lag0, alpha=alpha)


# %% ../nbs-dev/02_plotting.ipynb 11
def normal_probability_plot(*tseries, ax=None):
    ntseries = len(tseries)
    if not isinstance(tseries, tuple):
        tseries = (tseries,)

    if ax is None:
        fig, axs = plt.subplots(nrows=1, ncols=ntseries, figsize=(5 * ntseries, 4), sharey=True)
        if not isinstance(axs, np.ndarray):
            axs = (axs,)
    else:
        axs = (ax,)

    for ax, ts in zip(axs, tseries):
        (_, (slope, intercept, r)) = stats.probplot(ts, dist='norm', fit=True, plot=ax)
        ax.set_title(f"Normal Probability Plot (R2 = {r:.3f})")

    plt.show()

